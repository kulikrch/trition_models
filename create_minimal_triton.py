"""
–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Triton
"""
import os
import shutil
import torch
from working_demo import SimpleCNN

def create_minimal_triton():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("üîß –°–û–ó–î–ê–ù–ò–ï –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò TRITON")
    print("=" * 50)
    
    # –û—á–∏—â–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —á–∏—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    repo_path = "triton_minimal/model_repository"
    if os.path.exists("triton_minimal"):
        shutil.rmtree("triton_minimal")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
    model_dir = f"{repo_path}/simple_cifar10/1"
    os.makedirs(model_dir, exist_ok=True)
    
    print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π PyTorch –º–æ–¥–µ–ª–∏...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç—É—é traced –º–æ–¥–µ–ª—å
    model = SimpleCNN(num_classes=10)
    checkpoint = torch.load("models/working_model.pth", map_location='cpu')
    model.load_state_dict(checkpoint['model_state_dict'])
    model.eval()
    
    # –°–æ–∑–¥–∞–µ–º traced –º–æ–¥–µ–ª—å
    dummy_input = torch.randn(1, 3, 32, 32)
    traced_model = torch.jit.trace(model, dummy_input)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    model_path = f"{model_dir}/model.pt"
    traced_model.save(model_path)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_path}")
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_content = '''name: "simple_cifar10"
platform: "pytorch_libtorch"
max_batch_size: 0
input [
  {
    name: "input__0"
    data_type: TYPE_FP32
    dims: [ 3, 32, 32 ]
  }
]
output [
  {
    name: "output__0"
    data_type: TYPE_FP32
    dims: [ 10 ]
  }
]

instance_group [
  {
    count: 1
    kind: KIND_CPU
  }
]

version_policy: { all { }}
'''
    
    config_path = f"{repo_path}/simple_cifar10/config.pbtxt"
    with open(config_path, 'w') as f:
        f.write(config_content)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config_path}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π docker-compose
    docker_compose_content = '''version: '3.8'

services:
  triton-minimal:
    image: nvcr.io/nvidia/tritonserver:23.10-py3
    container_name: triton-minimal
    ports:
      - "8001:8001"
      - "8002:8002"
    volumes:
      - ./triton_minimal/model_repository:/models
    command: tritonserver --model-repository=/models --log-verbose=1
    restart: unless-stopped
'''
    
    with open("docker-compose-triton-minimal.yml", 'w') as f:
        f.write(docker_compose_content)
    
    print("‚úÖ Docker compose —Å–æ–∑–¥–∞–Ω: docker-compose-triton-minimal.yml")
    
    print(f"\nüéâ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ì–û–¢–û–í–ê!")
    print("=" * 50)
    print("üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    print("   triton_minimal/model_repository/")
    print("   ‚îî‚îÄ‚îÄ simple_cifar10/")
    print("       ‚îú‚îÄ‚îÄ 1/model.pt")
    print("       ‚îî‚îÄ‚îÄ config.pbtxt")
    
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫:")
    print("1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ä—ã–π Triton: docker-compose -f docker-compose-triton.yml down")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π: docker-compose -f docker-compose-triton-minimal.yml up -d")
    print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: curl http://localhost:8002/v2/models")
    
    return True

if __name__ == "__main__":
    create_minimal_triton()