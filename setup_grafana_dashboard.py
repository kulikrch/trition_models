"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞ Grafana —á–µ—Ä–µ–∑ API
"""
import requests
import json
import time

def wait_for_grafana(url="http://localhost:3000", max_retries=30):
    """–ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ Grafana"""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Grafana...")
    
    for i in range(max_retries):
        try:
            response = requests.get(f"{url}/api/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Grafana –∑–∞–ø—É—â–µ–Ω–∞!")
                return True
        except:
            pass
        
        time.sleep(2)
        if (i + 1) % 5 == 0:
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}/{max_retries}...")
    
    print("‚ùå Grafana –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    return False

def create_dashboard():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ —á–µ—Ä–µ–∑ API"""
    grafana_url = "http://localhost:3000"
    auth = ("admin", "admin")
    
    # –î–∞—à–±–æ—Ä–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    dashboard_config = {
        "dashboard": {
            "title": "ML Web Application Dashboard",
            "tags": ["ml", "webapp", "cpu"],
            "timezone": "browser",
            "panels": [
                {
                    "id": 1,
                    "title": "Request Rate",
                    "type": "graph",
                    "targets": [
                        {
                            "expr": "rate(http_requests_total[5m])",
                            "legendFormat": "Requests/sec",
                            "refId": "A"
                        }
                    ],
                    "gridPos": {
                        "h": 8,
                        "w": 12,
                        "x": 0,
                        "y": 0
                    },
                    "yAxes": [
                        {
                            "label": "Requests/sec"
                        }
                    ]
                },
                {
                    "id": 2,
                    "title": "CPU Usage",
                    "type": "graph",
                    "targets": [
                        {
                            "expr": "100 - (avg(rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                            "legendFormat": "CPU Usage %",
                            "refId": "A"
                        }
                    ],
                    "gridPos": {
                        "h": 8,
                        "w": 12,
                        "x": 12,
                        "y": 0
                    },
                    "yAxes": [
                        {
                            "label": "CPU %",
                            "max": 100
                        }
                    ]
                },
                {
                    "id": 3,
                    "title": "Memory Usage",
                    "type": "graph",
                    "targets": [
                        {
                            "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100",
                            "legendFormat": "Memory Usage %",
                            "refId": "A"
                        }
                    ],
                    "gridPos": {
                        "h": 8,
                        "w": 12,
                        "x": 0,
                        "y": 8
                    },
                    "yAxes": [
                        {
                            "label": "Memory %",
                            "max": 100
                        }
                    ]
                },
                {
                    "id": 4,
                    "title": "Container Stats",
                    "type": "graph",
                    "targets": [
                        {
                            "expr": "container_memory_usage_bytes",
                            "legendFormat": "{{name}}",
                            "refId": "A"
                        }
                    ],
                    "gridPos": {
                        "h": 8,
                        "w": 12,
                        "x": 12,
                        "y": 8
                    }
                }
            ],
            "time": {
                "from": "now-1h",
                "to": "now"
            },
            "refresh": "5s"
        },
        "overwrite": True
    }
    
    return dashboard_config

def setup_grafana():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Grafana"""
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê GRAFANA DASHBOARD")
    print("=" * 40)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Grafana
    if not wait_for_grafana():
        return False
    
    grafana_url = "http://localhost:3000"
    auth = ("admin", "admin")
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        response = requests.get(f"{grafana_url}/api/org", auth=auth)
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
            return False
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º data source
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Prometheus data source...")
        response = requests.get(f"{grafana_url}/api/datasources", auth=auth)
        
        datasources = response.json()
        prometheus_exists = any(ds.get('type') == 'prometheus' for ds in datasources)
        
        if not prometheus_exists:
            print("üìä –°–æ–∑–¥–∞–Ω–∏–µ Prometheus data source...")
            datasource_config = {
                "name": "Prometheus",
                "type": "prometheus",
                "url": "http://prometheus:9090",
                "access": "proxy",
                "isDefault": True
            }
            
            response = requests.post(
                f"{grafana_url}/api/datasources",
                json=datasource_config,
                auth=auth
            )
            
            if response.status_code in [200, 409]:  # 409 = already exists
                print("‚úÖ Prometheus data source —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è data source: {response.status_code}")
                print(response.text)
        else:
            print("‚úÖ Prometheus data source —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # 3. –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        print("üìà –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞...")
        dashboard_config = create_dashboard()
        
        response = requests.post(
            f"{grafana_url}/api/dashboards/db",
            json=dashboard_config,
            auth=auth
        )
        
        if response.status_code == 200:
            result = response.json()
            dashboard_url = f"{grafana_url}{result.get('url', '')}"
            print("‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üîó URL: {dashboard_url}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {response.status_code}")
            print(response.text)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê GRAFANA")
    print("=" * 50)
    
    success = setup_grafana()
    
    if success:
        print("\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("üìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
        print("   2. –í–æ–π–¥–∏—Ç–µ: admin / admin")
        print("   3. –ù–∞–π–¥–∏—Ç–µ –¥–∞—à–±–æ—Ä–¥ 'ML Web Application Dashboard'")
        print("   4. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –º–µ—Ç—Ä–∏–∫–∞–º–∏!")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ Grafana –∑–∞–ø—É—â–µ–Ω–∞: docker-compose logs grafana")
        print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ Prometheus –∑–∞–ø—É—â–µ–Ω: docker-compose logs prometheus")
        print("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: docker-compose restart grafana prometheus")

if __name__ == "__main__":
    main()