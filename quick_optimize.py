"""
–ë—ã—Å—Ç—Ä–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
"""
import torch
import os
import time
import numpy as np
from working_demo import SimpleCNN

def quick_optimize():
    print("üîç –ë–´–°–¢–†–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò")
    print("=" * 50)
    
    # –ù–∞—Ö–æ–¥–∏–º –º–æ–¥–µ–ª—å
    model_paths = ['models/working_model.pth', 'models/cifar10_model.pth']
    model_path = None
    
    for path in model_paths:
        if os.path.exists(path):
            model_path = path
            break
    
    if not model_path:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: {model_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = SimpleCNN(num_classes=10)
    checkpoint = torch.load(model_path, map_location='cpu')
    model.load_state_dict(checkpoint['model_state_dict'])
    model.eval()
    
    orig_acc = checkpoint.get('test_acc', 'Unknown')
    print(f"üìä –ò—Å—Ö–æ–¥–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {orig_acc}")
    
    # –ò–∑–º–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    print("\n‚è±Ô∏è –ò–ó–ú–ï–†–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("-" * 30)
    
    test_input = torch.randn(1, 3, 32, 32)
    
    # –ü—Ä–æ–≥—Ä–µ–≤
    for _ in range(10):
        with torch.no_grad():
            _ = model(test_input)
    
    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    times = []
    for _ in range(50):
        start = time.time()
        with torch.no_grad():
            _ = model(test_input)
        times.append(time.time() - start)
    
    orig_time = np.mean(times) * 1000
    print(f"üîµ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: {orig_time:.2f} ms")
    
    # –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è
    print("\nüîÑ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ö–í–ê–ù–¢–ò–ó–ê–¶–ò–ò:")
    print("-" * 30)
    
    quantized_model = torch.quantization.quantize_dynamic(
        model, 
        {torch.nn.Linear, torch.nn.Conv2d}, 
        dtype=torch.qint8
    )
    
    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    times = []
    for _ in range(50):
        start = time.time()
        with torch.no_grad():
            _ = quantized_model(test_input)
        times.append(time.time() - start)
    
    quant_time = np.mean(times) * 1000
    print(f"üü¢ –ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {quant_time:.2f} ms")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    quant_path = model_path.replace('.pth', '_quantized.pth')
    torch.save(quantized_model.state_dict(), quant_path)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
    orig_size = os.path.getsize(model_path) / (1024*1024)
    quant_size = os.path.getsize(quant_path) / (1024*1024)
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
    print("=" * 50)
    print(f"üìÅ –†–∞–∑–º–µ—Ä:")
    print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª:     {orig_size:.2f} MB")
    print(f"   –ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è: {quant_size:.2f} MB")
    print(f"   –°–∂–∞—Ç–∏–µ:       {orig_size/quant_size:.1f}x")
    print(f"   –≠–∫–æ–Ω–æ–º–∏—è:     {(1-quant_size/orig_size)*100:.1f}%")
    
    print(f"\n‚ö° –°–∫–æ—Ä–æ—Å—Ç—å:")
    print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª:     {orig_time:.2f} ms")
    print(f"   –ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è: {quant_time:.2f} ms")
    print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ:    {orig_time/quant_time:.1f}x")
    print(f"   Throughput:   {1000/quant_time:.1f} img/sec")
    
    print(f"\n‚úÖ –ö–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {quant_path}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ—á–Ω–æ—Å—Ç—å
    print("\nüß™ –¢–ï–°–¢ –¢–û–ß–ù–û–°–¢–ò:")
    print("-" * 20)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_images = torch.randn(100, 3, 32, 32)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    with torch.no_grad():
        orig_outputs = model(test_images)
        orig_preds = torch.argmax(orig_outputs, dim=1)
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    with torch.no_grad():
        quant_outputs = quantized_model(test_images)
        quant_preds = torch.argmax(quant_outputs, dim=1)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    agreement = (orig_preds == quant_preds).float().mean().item() * 100
    print(f"üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {agreement:.1f}%")
    
    # –†–∞–∑–Ω–∏—Ü–∞ –≤ –≤—ã—Ö–æ–¥–∞—Ö
    output_diff = torch.abs(orig_outputs - quant_outputs).mean().item()
    print(f"üìè –°—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤—ã—Ö–æ–¥–æ–≤: {output_diff:.6f}")
    
    print("\nüéâ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    
    return {
        'orig_size': orig_size,
        'quant_size': quant_size,
        'orig_time': orig_time,
        'quant_time': quant_time,
        'speedup': orig_time/quant_time,
        'compression': orig_size/quant_size,
        'agreement': agreement
    }

if __name__ == "__main__":
    results = quick_optimize()