"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""
import subprocess
import time
import webbrowser
import requests
import os
import sys

def run_command(command, background=False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
    print(f"üîß Running: {command}")
    if background:
        return subprocess.Popen(command, shell=True)
    else:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0

def check_service(url, name, timeout=5):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(url, timeout=timeout)
        if response.status_code == 200:
            print(f"‚úÖ {name} is running")
            return True
        else:
            print(f"‚ö†Ô∏è {name} returned status {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå {name} is not accessible: {e}")
        return False

def wait_for_services():
    """–ñ–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services = [
        ("http://localhost:8000/health", "ML Web App"),
        ("http://localhost:9090", "Prometheus"),
        ("http://localhost:3000", "Grafana"),
    ]
    
    print("‚è≥ Waiting for services to start...")
    max_retries = 30
    
    for retry in range(max_retries):
        all_ready = True
        
        for url, name in services:
            if not check_service(url, name):
                all_ready = False
        
        if all_ready:
            print("üéâ All services are ready!")
            return True
        
        time.sleep(5)
        print(f"   Retry {retry + 1}/{max_retries}...")
    
    print("‚ö†Ô∏è Some services may not be ready, but continuing...")
    return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ " + "="*60)
    print("üöÄ LAUNCHING COMPLETE ML SYSTEM")
    print("üöÄ " + "="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists("models/working_model.pth"):
        print("‚ùå Model not found! Please run working_demo.py first:")
        print("   python working_demo.py")
        sys.exit(1)
    
    # –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø—É—Å–∫–∞:")
    print("1. üåê –¢–æ–ª—å–∫–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (—É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ)")
    print("2. üìä –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º (Docker)")
    print("3. üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == "1":
        print("\nüåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8000")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        try:
            webbrowser.open("http://localhost:8000")
        except:
            pass
        
        print("\n‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print("   üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print("   ü§ñ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
        print("   ‚ö° –ü–æ–∫–∞–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞")
        
    elif choice == "2":
        print("\nüìä –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        if not run_command("docker --version"):
            print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
            sys.exit(1)
        
        if not run_command("docker-compose --version"):
            print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            sys.exit(1)
        
        print("üê≥ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        run_command("docker-compose -f docker-compose-extended.yml down")
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        if run_command("docker-compose -f docker-compose-extended.yml build"):
            print("‚úÖ –û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –æ–±—Ä–∞–∑–æ–≤")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        process = run_command("docker-compose -f docker-compose-extended.yml up -d", background=True)
        
        if wait_for_services():
            print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
            print("   üåê ML Web App:  http://localhost:8000")
            print("   üìä Prometheus:  http://localhost:9090")
            print("   üìà Grafana:     http://localhost:3000 (admin/admin)")
            print("   üíª Node Stats:  http://localhost:9100")
            print("   üê≥ cAdvisor:    http://localhost:8080")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            try:
                webbrowser.open("http://localhost:8000")
                time.sleep(2)
                webbrowser.open("http://localhost:3000")
            except:
                pass
        
    elif choice == "3":
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        services = [
            ("http://localhost:8000", "ML Web App"),
            ("http://localhost:8000/health", "ML App Health"),
            ("http://localhost:8000/stats", "ML App Stats"),
            ("http://localhost:9090", "Prometheus"),
            ("http://localhost:3000", "Grafana"),
            ("http://localhost:9100", "Node Exporter"),
            ("http://localhost:8080", "cAdvisor"),
        ]
        
        for url, name in services:
            check_service(url, name, timeout=3)
        
        print("\nüìä –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ Docker:")
        print("   docker-compose -f docker-compose-extended.yml logs -f")
        
        print("\nüõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print("   docker-compose -f docker-compose-extended.yml down")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
        sys.exit(1)
    
    print("\nüéØ " + "="*60)
    print("üéØ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    print("üéØ " + "="*60)
    
    print("\nüí° –ß—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:")
    print("   üñºÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("   üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ Grafana")
    print("   üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API: curl -X POST -F 'file=@image.jpg' http://localhost:8000/predict")
    print("   üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: http://localhost:8000/stats")

if __name__ == "__main__":
    main()