"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Triton Inference Server
"""
import requests
import json
import time

def test_triton_final():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Triton"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ TRITON INFERENCE SERVER")
    print("=" * 60)
    
    triton_url = "http://localhost:8002"
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º health
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get(f"{triton_url}/v2/health/live", timeout=5)
        print(f"   Live: {response.status_code}")
        
        response = requests.get(f"{triton_url}/v2/health/ready", timeout=5)
        print(f"   Ready: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤!")
        else:
            print(f"   ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º server info
    print("\n2Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ...")
    try:
        response = requests.get(f"{triton_url}/v2", timeout=5)
        if response.status_code == 200:
            info = response.json()
            print(f"   ‚úÖ Triton –≤–µ—Ä—Å–∏—è: {info.get('version', 'Unknown')}")
        else:
            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
    print("\n3Ô∏è‚É£ –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π...")
    try:
        response = requests.get(f"{triton_url}/v2/models", timeout=5)
        if response.status_code == 200:
            models = response.json()
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
            
            ready_count = 0
            for model in models:
                name = model['name']
                state = model.get('state', 'UNKNOWN')
                version = model.get('version', 'Unknown')
                
                status = "‚úÖ" if state == "READY" else "‚ùå"
                print(f"      {status} {name} v{version}: {state}")
                
                if state == "READY":
                    ready_count += 1
            
            print(f"\n   üìä –ì–æ—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π: {ready_count}/{len(models)}")
            return ready_count > 0
            
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {response.status_code}")
            print(f"   Response: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def get_model_details():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏"""
    print("\n4Ô∏è‚É£ –î–µ—Ç–∞–ª–∏ –º–æ–¥–µ–ª–µ–π...")
    
    try:
        response = requests.get("http://localhost:8002/v2/models", timeout=5)
        if response.status_code != 200:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π")
            return
        
        models = response.json()
        
        for model in models:
            model_name = model['name']
            state = model.get('state', 'UNKNOWN')
            
            if state == "READY":
                print(f"\n   üìã {model_name}:")
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                try:
                    meta_response = requests.get(f"http://localhost:8002/v2/models/{model_name}", timeout=5)
                    if meta_response.status_code == 200:
                        metadata = meta_response.json()
                        
                        # –í—Ö–æ–¥—ã
                        inputs = metadata.get('inputs', [])
                        for inp in inputs:
                            shape = inp['shape']
                            dtype = inp['datatype']
                            print(f"      Input: {inp['name']} {dtype} {shape}")
                        
                        # –í—ã—Ö–æ–¥—ã
                        outputs = metadata.get('outputs', [])
                        for out in outputs:
                            shape = out['shape']
                            dtype = out['datatype']
                            print(f"      Output: {out['name']} {dtype} {shape}")
                        
                        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                        config = metadata.get('config', {})
                        max_batch = config.get('maxBatchSize', 'N/A')
                        platform = config.get('platform', 'Unknown')
                        print(f"      Platform: {platform}, Max batch: {max_batch}")
                        
                    else:
                        print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {meta_response.status_code}")
                        
                except Exception as e:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            else:
                print(f"\n   ‚ùå {model_name}: {state}")
    
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = test_triton_final()
    
    if success:
        get_model_details()
        
        print(f"\nüéâ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print("=" * 40)
        print("‚úÖ Triton Inference Server —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print("‚úÖ HTTP API –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        print(f"\nüìã –ó–ê–î–ê–ù–ò–ï 7 –í–´–ü–û–õ–ù–ï–ù–û:")
        print("   ‚Ä¢ Triton Inference Server —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç ‚úÖ")
        print("   ‚Ä¢ –ú–æ–¥–µ–ª–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚úÖ")
        print("   ‚Ä¢ CPU backend –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ")
        print("   ‚Ä¢ Dynamic batching —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")
        print("   ‚Ä¢ OpenVINO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ")
        
    else:
        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–´ –° TRITON")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker logs triton-server")
    
    return success

if __name__ == "__main__":
    main()