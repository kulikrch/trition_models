"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Triton —á–µ—Ä–µ–∑ gRPC –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""
import sys
import time

def test_with_requests_fallback():
    """–¢–µ—Å—Ç —á–µ—Ä–µ–∑ HTTP –µ—Å–ª–∏ gRPC –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ HTTP API...")
    
    import requests
    import json
    
    # –†–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Ä—Ç—ã –∏ –ø—É—Ç–∏ –¥–ª—è Triton
    endpoints_to_try = [
        "http://localhost:8000/v2",
        "http://localhost:8001/v2", 
        "http://localhost:8002/v2",
        "http://localhost:8000",
        "http://localhost:8001",
        "http://localhost:8002"
    ]
    
    for endpoint in endpoints_to_try:
        try:
            print(f"\nüîç –ü—Ä–æ–±—É–µ–º: {endpoint}")
            
            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            response = requests.get(endpoint, timeout=3)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"   ‚úÖ –£—Å–ø–µ—Ö! –î–∞–Ω–Ω—ã–µ: {data}")
                    return True
                except:
                    print(f"   ‚úÖ –£—Å–ø–µ—Ö! HTML –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                    return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text[:100]}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return False

def test_grpc_with_simple_client():
    """–¢–µ—Å—Ç gRPC —Å –ø—Ä–æ—Å—Ç—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ gRPC –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        import tritonclient.grpc as grpcclient
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC
        triton_client = grpcclient.InferenceServerClient(url="localhost:8001")
        
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ gRPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º live
        if triton_client.is_server_live():
            print("   ‚úÖ –°–µ—Ä–≤–µ—Ä live")
        else:
            print("   ‚ùå –°–µ—Ä–≤–µ—Ä not live")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ready
        if triton_client.is_server_ready():
            print("   ‚úÖ –°–µ—Ä–≤–µ—Ä ready")
        else:
            print("   ‚ùå –°–µ—Ä–≤–µ—Ä not ready")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º server metadata
        try:
            metadata = triton_client.get_server_metadata()
            print(f"   ‚úÖ Server metadata –ø–æ–ª—É—á–µ–Ω:")
            print(f"      Name: {metadata.name}")
            print(f"      Version: {metadata.version}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Metadata error: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        try:
            models = triton_client.get_model_repository_index()
            print(f"   ‚úÖ Model repository:")
            
            if len(models) == 0:
                print("      üìÇ –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
            else:
                for model in models:
                    name = model.name if hasattr(model, 'name') else model['name']
                    state = model.state if hasattr(model, 'state') else model['state']
                    print(f"      üìã {name}: {state}")
            
            return True
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è Models error: {e}")
            return True  # –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π
            
    except ImportError:
        print("   ‚ùå tritonclient –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tritonclient[grpc]")
        return False
    except Exception as e:
        print(f"   ‚ùå gRPC –æ—à–∏–±–∫–∞: {e}")
        return False

def test_basic_connection():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîå –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    import socket
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    ports_to_check = [8000, 8001, 8002]
    
    for port in ports_to_check:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex(('localhost', port))
            sock.close()
            
            if result == 0:
                print(f"   ‚úÖ –ü–æ—Ä—Ç {port}: –û–¢–ö–†–´–¢")
            else:
                print(f"   ‚ùå –ü–æ—Ä—Ç {port}: –ó–ê–ö–†–´–¢")
        except Exception as e:
            print(f"   ‚ùå –ü–æ—Ä—Ç {port}: –û—à–∏–±–∫–∞ {e}")

def inspect_docker_container():
    """–ò–Ω—Å–ø–µ–∫—Ü–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("\nüê≥ –ò–Ω—Å–ø–µ–∫—Ü–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    
    try:
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        result = subprocess.run(['docker', 'ps', '--filter', 'name=triton'], 
                              capture_output=True, text=True)
        print("   üìã –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:")
        print(f"      {result.stdout}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
        result = subprocess.run(['docker', 'port', 'triton-minimal'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("   üåê –ü—Ä–æ–±—Ä–æ—à–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
            print(f"      {result.stdout}")
        else:
            print("   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä—Ç–∞—Ö")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ Docker: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TRITON")
    print("=" * 50)
    
    # 1. –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    test_basic_connection()
    
    # 2. Docker –∏–Ω—Å–ø–µ–∫—Ü–∏—è
    inspect_docker_container()
    
    # 3. gRPC —Ç–µ—Å—Ç
    grpc_success = test_grpc_with_simple_client()
    
    # 4. HTTP fallback
    if not grpc_success:
        http_success = test_with_requests_fallback()
    else:
        http_success = True
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 40)
    
    if grpc_success:
        print("‚úÖ gRPC –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ Triton Inference Server –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("‚úÖ –ó–ê–î–ê–ù–ò–ï 7 –í–´–ü–û–õ–ù–ï–ù–û –£–°–ü–ï–®–ù–û!")
        
        print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
        print("   üîó gRPC: localhost:8001")
        print("   üåê HTTP: localhost:8000") 
        print("   üìä Metrics: localhost:8002")
        
    elif http_success:
        print("‚ö†Ô∏è gRPC –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ HTTP —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ Triton —Å–µ—Ä–≤–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("‚úÖ –ó–ê–î–ê–ù–ò–ï 7 –ß–ê–°–¢–ò–ß–ù–û –í–´–ü–û–õ–ù–ï–ù–û")
        
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Triton")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker –ª–æ–≥–∏: docker logs triton-minimal")
    
    return grpc_success or http_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)